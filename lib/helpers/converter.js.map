{"version":3,"sources":["../../src/helpers/converter.js"],"names":["value","providedIn","requiredIn","decimalPlaces","stringFormat","config","noThirdParty","toBest","convertedValue","name","functionName","converter","Conversions","factorName","convert","from","symbol","unit","val","to","returnValue","require"],"mappings":";;;;;;kBAKe,gBASZ;AAAA,QARCA,KAQD,QARCA,KAQD;AAAA,QAPCC,UAOD,QAPCA,UAOD;AAAA,QANCC,UAMD,QANCA,UAMD;AAAA,QALCC,aAKD,QALCA,aAKD;AAAA,QAJCC,YAID,QAJCA,YAID;AAAA,2BAHCC,MAGD;AAAA,QAHCA,MAGD,+BAHU,EAGV;AAAA,QAFCC,YAED,QAFCA,YAED;AAAA,QADCC,MACD,QADCA,MACD;;AACC,QAAIC,cAAJ;AACA,QAAIP,WAAWQ,IAAX,IAAmBP,WAAWO,IAAlC,EAAwCD,iBAAiBR,KAAjB,CAAxC,KACK;AACD,YAAIU,eACAT,WAAWQ,IAAX,GAAkB,IAAlB,GAAyB,8BAAeP,WAAWO,IAA1B,CAD7B;AAEA,YAAIE,YAAYC,sBAAYF,YAAZ,CAAhB;AACA,YAAIG,aACAZ,WAAWQ,IAAX,GAAkB,KAAlB,GAA0B,8BAAeP,WAAWO,IAA1B,CAD9B;AAEA,YAAIH,YAAJ,EAAkBE,iBAAiBG,UAAUX,KAAV,EAAiBK,OAAOQ,UAAP,CAAjB,CAAjB,CAAlB,KACK,IAAIN,MAAJ,EAAY;AACbC,6BAAiBM,QAAQd,KAAR,EACZe,IADY,CACPd,WAAWQ,IADJ,EAEZF,MAFY,EAAjB;AAGAL,uBAAWc,MAAX,GAAoBR,eAAeS,IAAnC;AACAT,6BAAiBA,eAAeU,GAAhC;AACH,SANI,MAODV,iBAAiBM,QAAQd,KAAR,EACZe,IADY,CACPd,WAAWQ,IADJ,EAEZU,EAFY,CAETjB,WAAWO,IAFF,CAAjB;AAGP;AACD,QAAIW,cAAcZ,cAAlB;AACA,QAAI,OAAOL,aAAP,KAAyB,WAAzB,IAAwCA,kBAAkB,IAA9D,EAAoE;AAChEiB,sBAAc,qCAAsBA,WAAtB,EAAmCjB,aAAnC,CAAd;AACH;AACD,QAAIC,YAAJ,EAAkB;AACdgB,sBAAc,+BACVA,WADU,EAEVlB,WAAWc,MAFD,EAGVZ,YAHU,CAAd;AAKH;AACD,WAAOgB,WAAP;AACH,C;;AA9CD;;;;AACA;;;;AACA;;;;AACA;;;;;;AAJA,IAAIN,UAAUO,QAAQ,eAAR,CAAd","file":"converter.js","sourcesContent":["var convert = require('convert-units');\nimport Conversions from '../Conversions';\nimport firstLetterCap from './firstLetterCap';\nimport decimalValueGenerator from './decimalValueGenerator';\nimport stringGenerator from './stringGenerator';\nexport default function({\n    value,\n    providedIn,\n    requiredIn,\n    decimalPlaces,\n    stringFormat,\n    config = {},\n    noThirdParty,\n    toBest,\n}) {\n    var convertedValue;\n    if (providedIn.name == requiredIn.name) convertedValue = value;\n    else {\n        var functionName =\n            providedIn.name + 'To' + firstLetterCap(requiredIn.name);\n        var converter = Conversions[functionName];\n        var factorName =\n            providedIn.name + 'Per' + firstLetterCap(requiredIn.name);\n        if (noThirdParty) convertedValue = converter(value, config[factorName]);\n        else if (toBest) {\n            convertedValue = convert(value)\n                .from(providedIn.name)\n                .toBest();\n            requiredIn.symbol = convertedValue.unit;\n            convertedValue = convertedValue.val;\n        } else\n            convertedValue = convert(value)\n                .from(providedIn.name)\n                .to(requiredIn.name);\n    }\n    var returnValue = convertedValue;\n    if (typeof decimalPlaces !== 'undefined' && decimalPlaces !== null) {\n        returnValue = decimalValueGenerator(returnValue, decimalPlaces);\n    }\n    if (stringFormat) {\n        returnValue = stringGenerator(\n            returnValue,\n            requiredIn.symbol,\n            stringFormat\n        );\n    }\n    return returnValue;\n}\n"]}